#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>

// Функция для преобразования слова в нижний регистр
//Функция toLower() использует стандартную функцию transform(), которая принимает три итератора - начало и конец входной последовательности и начало выходной последовательности,
//а также функцию(в данном случае::tolower), которая определяет преобразование, которое нужно применить к каждому элементу входной последовательности.
//В данном случае::tolower - это функция, предоставляемая стандартной библиотекой C++, которая преобразует символ в его эквивалент в нижнем регистре.

std::string toLower(std::string word) {
    std::transform(word.begin(), word.end(), word.begin(), ::tolower);
    return word;
}

int main() {
    // Открытие файла
    std::ifstream file("C:/Users/Professional/Desktop/test_text.rtf");
    if (!file.is_open()) {
        std::cerr << "Unable to open file" << std::endl;
        return 1;
    }
std::string line;
std::vector<std::string> words;

// Считывание каждой строки из файла
//Сначала создается переменная line для хранения считываемой строки и words для хранения уникальных слов.
//Затем происходит цикл while, который считывает каждую строку из файла с помощью функции std::getline.
//Далее создается объект std::istringstream iss, который используется для извлечения слов из строки.
//Затем идет цикл while, который извлекает каждое слово из строки с помощью iss >> word.
//Каждое извлеченное слово приводится к нижнему регистру с помощью функции toLower.
//Затем с помощью функции std::find проверяется, содержится ли это слово уже в векторе words.
//Если слово не найдено в векторе, то оно добавляется в конец вектора с помощью words.push_back.

//Сначала определяется строковая переменная line и вектор строк words.
//Затем выполняется цикл while, который читает файл построчно и сохраняет каждую строку в переменную line.
//Внутри цикла создается строковый поток iss, который ассоциируется с line.
//Далее создается строковая переменная word, которая будет использоваться для извлечения отдельных слов из строки.
//Затем начинается вложенный цикл while, который извлекает слова из строки с помощью оператора >> и сохраняет их в переменную word.
//Каждое извлеченное слово приводится к нижнему регистру с помощью функции toLower.
//Далее, с помощью std::find, проверяется, содержится ли это слово уже в векторе words.Если слово не найдено, оно добавляется в вектор с помощью push_back.
//Таким образом, после завершения циклов в векторе words содержатся только уникальные слова, извлеченные из файла.

while (std::getline(file, line)) {
    std::istringstream iss(line);
    std::string word;
    // Извлечение уникальных слов из предложения
    while (iss >> word) {
        word = toLower(word);
        if (std::find(words.begin(), words.end(), word) == words.end()) {
            words.push_back(word);
        }
    }
}

// Сортировка списка слов
std::sort(words.begin(), words.end());

// Поиск слова
//Этот код на C++ сначала выводит сообщение "Enter a word to search for: ", после чего ожидает ввода пользовательского слова.
//После того, как пользователь введет слово, оно будет сохранено в переменной searchWord типа std::string.
//Затем программа вызывает функцию toLower, передавая ей введенное пользователем слово в качестве аргумента.
//Функция toLower преобразует все символы в слове в нижний регистр, и измененное слово сохраняется обратно в переменную searchWord.
//Таким образом, после выполнения этого кода в переменной searchWord будет храниться введенное пользователем слово, преобразованное в нижний регистр.

//Печатается приглашение ввести слово для поиска.
//Пользователь вводит слово, которое сохраняется в переменной searchWord.
//Слово приводится к нижнему регистру с помощью функции toLower.
//Выполняется поиск в списке слов(предположительно хранящемся в переменной words) с помощью функции std::find.
//Если слово найдено, выводится сообщение о том, что слово найдено в списке.
//Затем происходит поиск количества вхождений этого слова в тексте, хранящемся в файле.
//Если слово не найдено в списке, выводится сообщение о его отсутствии.
//В конце выводится индекс найденного слова в отсортированном списке слов.

std::cout << "Enter a word to search for: ";
std::string searchWord;
std::cin >> searchWord;
searchWord = toLower(searchWord);

// Поиск слова в списке
auto it = std::find(words.begin(), words.end(), searchWord);
if (it != words.end()) {
    std::cout << "The word was found in the list" << std::endl;

    // Поиск количества вхождений слова в исходном тексте
 /*   Затем файл сбрасывается в начало(file.clear()) и устанавливается указатель на начало файла(file.seekg(0, std::ios::beg)).Это необходимо для того, чтобы начать чтение файла с самого начала.
        Создается переменная count, которая будет использоваться для подсчета количества вхождений искомого слова в файле
        Затем запускается цикл while, который будет читать файл построчно.В каждой строке создается объект std::istringstream для удобства разбиения строки на отдельные слова.
        Затем запускается еще один вложенный цикл while, который читает каждое слово в текущей строке.
        Если преобразованное в нижний регистр слово совпадает с искомым словом(searchWord), то счетчик count увеличивается на 1.
        После завершения цикла while файл будет полностью прочитан, и переменная count будет содержать количество вхождений искомого слова в файле.*/
    file.clear();
    file.seekg(0, std::ios::beg);
    int count = 0;
    while (std::getline(file, line)) {

        //Эта строчка кода создает объект класса std::istringstream с именем iss, используя конструктор, который принимает строку line в качестве аргумента.Класс std::istringstream является частью стандартной библиотеки C++
        //    и он используется для чтения данных из строки, как если бы она была потоком ввода
        //    После создания объекта iss, вы можете использовать его для извлечения данных из строки, например, с помощью операторов извлечения(>> ) или методов, таких как getline()
        //    Таким образом, этот объект можно использовать для разбиения строки на отдельные элементы, например, если строка содержит числа или слова, вы можете извлечь их и обработать по отдельности.
        //    В общем, эта строчка кода позволяет вам работать с содержимым строки line, как если бы оно было вводом из потока, что может быть полезно при обработке текстовых данных в программе на C++.

        std::istringstream iss(line);
        std::string word;
        while (iss >> word) {
            if (toLower(word) == searchWord) {
                count++;
            }
        }
    }
    std::cout << "Number of occurrences in the text: " << count << std::endl;

    // Возвращаем индекс из отсортированного списка
    //Код использует стандартный поток вывода std::cout для отображения сообщений.
    //    Первая часть кода std::cout << "Index in the sorted list: " << std::distance(words.begin(), it) << std::endl; проверяет, было ли найдено слово в списке посредством вызова функции std::distance().
    //    Функция std::distance() принимает начальную и конечную позиции в списке и возвращает количество элементов между ними.
    //    В данном случае words.begin() представляет начало списка, а it представляет позицию, в которой было найдено слово.Таким образом, достаточно сложное, шаблонное и детальное описание располагается в этой строке.
    //    Вторая часть кода std::cout << "The word was not found in the list" << std::endl; сообщает, что слово не было найдено в списке, если условие else выполняется.
    //    Таким образом, этот код обеспечивает информацию о том, было ли найдено слово в отсортированном списке и, если да, то на какой позиции.

    std::cout << "Index in the sorted list: " << std::distance(words.begin(), it) << std::endl;
}
else {
    std::cout << "The word was not found in the list" << std::endl;
}

file.close();
return 0;
}
